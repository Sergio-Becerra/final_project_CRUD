AWSTemplateFormatVersion: "2010-09-09" 
Parameters:
    LatestAmiId:
      Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
      Default: '/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id'

    ClusterName:
      Description: Name of your Amazon ECS Cluster
      Type: String
      ConstraintDescription: must be a valid Amazon ECS Cluster.
      Default: clip_crud_project_sabc_cluster

Resources:

# ---------- CLUSTER ----------------
  CrudCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName
      CapacityProviders:
        - !Ref ECSCapProvider
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: "clip_crud_project_sabc_cluster"
  
  ECSCapProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref AppASG
        ManagedScaling:
          Status: ENABLED
      Name: "Crud-project"

# ---------- ROLE FOR INSTANCES ----------------
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Role for ecs instances"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      RoleName: "Crudecsrole"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 
              - ec2.amazonaws.com
            Action: ['sts:AssumeRole']

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref ECSRole]
  
# ---------- LAUNCH CONFIG AND AUTOSCALING ----------------
  ECSLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref ECSInstanceProfile
      ImageId: !Ref LatestAmiId 
      InstanceMonitoring: true
      InstanceType: t2.small 
      SecurityGroups:
      - !ImportValue APPSG
      AssociatePublicIpAddress: false
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            echo "ECS_CLUSTER=${ClusterName}" >> /etc/ecs/ecs.config
            systemctl enable --now --no-block docker
            systemctl enable --now --no-block ecs
            systemctl restart --now --noblock docker
            systemctl restart --now --noblock ecs
            
  AppASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !ImportValue AppSubnetA
        - !ImportValue AppSubnetB
      LaunchConfigurationName: !Ref ECSLaunchConfig
      HealthCheckGracePeriod: 120
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - GroupDesiredCapacity
            - GroupMaxSize
            - GroupMinSize
      MinSize: 2
      MaxSize: 6
      Tags:
        - Key: Owner
          Value: Sergio Becerra
          PropagateAtLaunch: true  
  
# ---------- LOAD BALANCER ----------------

  AppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: "ipv4"
      Name: "CRUDAppLB"
      Scheme: "internet-facing"
      SecurityGroups:
        - !ImportValue  LBSC
      Subnets: 
        - !ImportValue PublicSubA
        - !ImportValue PublicSubB
      Type: "application"
      Tags:
        - Key: Name
          Value: "clip_crud_project_sabc_LB"


# ---------- DESIRED CAPACITY ALARM ----------------

  AGSDesiredCapacity:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm for changes in the AGS desired capacity to a lower level 
      AlarmActions: 
        - !Ref EmailSNS
      MetricName: GroupDesiredCapacity
      Namespace: AWS/AutoScaling
      Statistic: Minimum
      Period: '60'
      EvaluationPeriods: '3'
      Threshold: '1'
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AppASG

  AGSDesiredCapacityDemo:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm for changes in the AGS desired capacity to a lower level 
      AlarmActions: 
        - !Ref EmailSNS
      MetricName: GroupDesiredCapacity
      Namespace: AWS/AutoScaling
      Statistic: Minimum
      Period: '10'
      EvaluationPeriods: '1'
      Threshold: '1'
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AppASG

  EmailSNS: 
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
        - Endpoint: "sergio.becerra@payclip.com"
          Protocol: "email"
      TopicName: "Alarmcpu" 
      Tags:
        - Key: Name
          Value: "clip_crud_project_sabc_sns_topic"

Outputs:

  Clusterecs:
    Description: Cluster for ecs 
    Value: !Ref CrudCluster 
    Export: 
      Name: CrudECS
  
  APPLBE:
    Description: Load Balancer for crud app 
    Value: !Ref AppLB
    Export: 
      Name: AppLBE

  EmailSNSE:
    Description: Email sns export 
    Value: !Ref EmailSNS
    Export: 
      Name: EmailSNS