AWSTemplateFormatVersion: "2010-09-09" 
Parameters:
    LatestAmiId:
      Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
      Default: '/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id'

    ClusterName:
      Description: Name of your Amazon ECS Cluster
      Type: String
      ConstraintDescription: must be a valid Amazon ECS Cluster.
      Default: clip_crud_project_sabc_cluster
Resources:

  CrudCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName
      CapacityProviders:
        - !Ref ECSCapProvider
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: "clip_crud_project_sabc_cluster"

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Role for ecs instances"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      RoleName: "Crudecsrole"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref ECSRole]
  
  InstanceKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: "ECSInstanceKeyPair2" # Required
      PublicKeyMaterial: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCNMHmD3hJ9yIgzDK2Qr/M7eenR7+x7C4rqacubMMX5ofsjlLxXD4GjH/VGJbqSLI3aV0tuPRlAPYK10moSOpOhkKd5P4lcsskYwXJ6Iqr6sqDu4dIUqoxN/78wVuxI35WTLIiycMb5ITxivnj/xtqzdC2G+GCZGuFFRKXOoKzZQeuZYVtksesxvdeQS1HlMpHwv2iJFxXgocJGDHK+AvI3JwTsjvCvWMFDpar388V/M2japbiZIgjL+NDar+75si9hqamV6lGnCYf3m18AsqXClmtwzxZNNlHl6Nnc/kbsw9lBDBGZfmwQgsSTpEAIuEyX3/eOGcwq9Z3XJQciTws9 sabc-test-keypair"

# ************************* AUTOSCALING ***********************************
  ECSLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref ECSInstanceProfile
      ImageId: !Ref LatestAmiId 
      InstanceMonitoring: true
      InstanceType: t2.small 
      KeyName: !Ref InstanceKeyPair
      SecurityGroups:
      - !ImportValue APPSG
      AssociatePublicIpAddress: false
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            echo "ECS_CLUSTER=${ClusterName}" >> /etc/ecs/ecs.config
            systemctl enable --now --no-block docker
            systemctl enable --now --no-block ecs
            systemctl restart --now --noblock docker
            systemctl restart --now --noblock ecs
            
       
  AppASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !ImportValue AppSubnetA
        - !ImportValue AppSubnetB
      LaunchConfigurationName: !Ref ECSLaunchConfig
      MinSize: 2
      MaxSize: 6
      TargetGroupARNs:
        - !Ref AppTargetGroup
      Tags:
        - Key: Owner
          Value: Sergio Becerra
          PropagateAtLaunch: true  
  
  ECSCapProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref AppASG
        ManagedScaling:
          Status: ENABLED
      Name: "Crud-project"

# ************************* LOAD BALANCER ***********************************
  LBSC:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "SgForLB" 
      GroupDescription: " Security group for Load Balancer"
      VpcId: !ImportValue CrudVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: clip_crud_project_sabc_lbsg

  AppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: "ipv4"
      Name: "AppLB"
      Scheme: "internet-facing"
      SecurityGroups:
        - !Ref LBSC
      Subnets: 
        - !ImportValue PublicSubA
        - !ImportValue PublicSubB
      Type: "application"

  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup
      LoadBalancerArn: !Ref AppLB
      Port: 5000
      Protocol: "HTTP"

  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "Crud-project-sabc"
      Port: 5000
      Protocol: "HTTP"
      TargetType: "instance"
      VpcId: !ImportValue CrudVPC
      Tags:
        - Key: Name
          Value: crud-sabc-tg

Outputs:

  Clusterecs:
    Description: Cluster for ecs 
    Value: !Ref CrudCluster 
    Export: 
      Name: CrudECS